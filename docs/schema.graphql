type Query {
  entry(id: ID!): Entry
}

type Entry {
  id: ID!
  definition: Definition!
  value: Table!
}

type Definition {
  category: Int!
  preverb: String
  version: String!
  root: String!
  thema: String
}

type Table {
  SRS1: SRS1!
  SRS2: SRS2!
  SRS3: SRS3!
}

type SRS1 {
  GRP1: GRP1!
  GRP2: GRP2!
}

type GRP1 {
  PRS: Screeve!
  IMPF: Screeve!
  PRSSUBJ: Screeve!
}

type GRP2 {
  FUT: Screeve!
  COND: Screeve!
  FUTSUBJ: Screeve!
}

type SRS2 {
  AOR: Screeve!
  AORIMPF: Screeve!
  OPT: Screeve!
  OPTIMPF: Screeve!
}

type SRS3 {
  PERF: Screeve!
  PERFIMPF: Screeve!
  PLUPERF: Screeve!
  PLUPERFIMPF: Screeve!
  PERFSUBJ: Screeve!
  PERFSUBJIMPF: Screeve!
}

type Screeve {
  S1: Form!
  S2: Form!
  S3: Form!
  P1: Form!
  P2: Form!
  P3: Form!
}

type Form {
  preverb: Component!
  person1: Component!
  version: Component!
  root: Component!
  thema: Component!
  modus: Component!
  person2: Component!
}

type Component {
  label: String!
  value: String
  isException: Boolean!
  note: String
}