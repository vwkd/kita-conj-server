type Query {
  entry(id: ID!): Entry
}

type Entry {
  id: ID!
  definition: Definition!
  value: TableOrException!
}

type Definition {
  category: Int!
  preverb: String
  version: String!
  root: String!
  thema: String
}

union TableOrException = Table | Exception

type Table {
  SRS1: SRS1OrException!
  SRS2: SRS2OrException!
  SRS3: SRS3OrException!
}

union SRS1OrException = SRS1 | Exception

type SRS1 {
  GRP1: GRP1OrException!
  GRP2: GRP2OrException!
}

union GRP1OrException = GRP1 | Exception

type GRP1 {
  PRS: ScreeveOrException!
  IMPF: ScreeveOrException!
  PRSSUBJ: ScreeveOrException!
}

union ScreeveOrException = Screeve | Exception

type Screeve {
  S1: SubjectOrException!
  S2: SubjectOrException!
  S3: SubjectOrException!
  P1: SubjectOrException!
  P2: SubjectOrException!
  P3: SubjectOrException!
}

union SubjectOrException = Subject | Exception

type Subject {
  S1: FormOrException!
  S2: FormOrException!
  S3: FormOrException!
  P1: FormOrException!
  P2: FormOrException!
  P3: FormOrException!
}

union FormOrException = Form | Exception

type Form {
  preverb: ComponentOrException!
  person1: ComponentOrException!
  version: ComponentOrException!
  root: ComponentOrException!
  thema: ComponentOrException!
  modus: ComponentOrException!
  person2: ComponentOrException!
}

union ComponentOrException = Component | Exception

type Component {
  value: String
}

type Exception {
  value: String
  note: String!
}

union GRP2OrException = GRP2 | Exception

type GRP2 {
  FUT: ScreeveOrException!
  COND: ScreeveOrException!
  FUTSUBJ: ScreeveOrException!
}

union SRS2OrException = SRS2 | Exception

type SRS2 {
  AOR: ScreeveOrException!
  AORIMPF: ScreeveOrException!
  OPT: ScreeveOrException!
  OPTIMPF: ScreeveOrException!
}

union SRS3OrException = SRS3 | Exception

type SRS3 {
  PERF: ScreeveOrException!
  PERFIMPF: ScreeveOrException!
  PLUPERF: ScreeveOrException!
  PLUPERFIMPF: ScreeveOrException!
  PERFSUBJ: ScreeveOrException!
  PERFSUBJIMPF: ScreeveOrException!
}